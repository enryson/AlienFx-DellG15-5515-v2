#include <cstdint>
#include <vector>
#include <iostream>
#include "LightFX.h"
#include "USBDeviceHandler.h"
#include "PayloadAgregation.h"

const uint8_t payload1[] = {
    0x03, 0x21, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// configuraÄ‡ao de regiao do teclado

const uint8_t payload2[] = {
    0x03, 
    0x23, 
    0x01, 
    0x00, //esquerda, centro esquerda, centro direita, direita
    0x01, //  0x04,     0x04,   0x04,   0x04,           0x04,
    0x08, //  0x08,     0x09,   0x08,   0x0a,           0x0b,
    0x09,
    0x0a,
    0x0b,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// esse controla as cores
const uint8_t payload3[] = {
    0x03, 0x24, 0x00, 0x07, 0xd0, 0x00, 0xfa, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t payload4[] = {
    0x03, 0x21, 0x00, 0x03, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

int main()
{
    USBDeviceHandler usbHandler(0x187c, 0x0550);
    LightFX LFX;
    PayloadAgregation payloads;

    if (!usbHandler.init())
        return 1;
    if (!usbHandler.open())
        return 1;
    if (!usbHandler.claimInterface(0))
        return 1;

    payloads.addPayload(payload1, sizeof(payload1));
    payloads.addPayload(payload2, sizeof(payload2));
    payloads.addPayload(payload3, sizeof(payload3));
    payloads.addPayload(payload4, sizeof(payload4));

    // payloads.addPayload(LFX.Init(), sizeof(LFX.Init()));
    // payloads.addPayload(LFX.Region(1), sizeof(LFX.Region(1)));
    // payloads.addPayload(LFX.Color(222, 222, 222), sizeof(LFX.Color(222, 222, 222)));
    // payloads.addPayload(LFX.Save(), sizeof(LFX.Save()));
    size_t num_payloads = payloads.getNumPayloads();
    // std::cout << "numero :" << num_payloads << std::dec << std::endl;
    // payloads.displayPayloads();

    for (size_t i = 0; i < num_payloads; ++i)
    {
        const uint8_t *current_payload = payloads.getPayload(i);
        size_t current_payload_size = payloads.getPayloadSize(i);
        usbHandler.sendPayload(current_payload, current_payload_size);
    }

    usbHandler.releaseInterface(0);
    usbHandler.close();
    return 0;
}
